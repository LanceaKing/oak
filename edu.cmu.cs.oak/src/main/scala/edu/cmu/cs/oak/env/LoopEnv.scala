package edu.cmu.cs.oak.env

import scala.collection.immutable.Stack

import edu.cmu.cs.oak.nodes.DNode
import edu.cmu.cs.oak.nodes.RepeatNode

/**
 * Separate environment used to keep track of repeatable output 
 * generated by loops. In order to cope nested loops we therefore 
 * use nested (loop) environments.
 * 
 * @author Stefan Muehlbauer <s.muehlbauer@andrew.cmu.edu>
 * 
 */
class LoopEnv(parent: Environment, calls: Stack[Call], constraint: Constraint) extends Environment(parent: Environment, calls: Stack[Call], constraint: Constraint) { 

  /*
   * Get the output sequence from the environment.
   * @return output as sequence of values
   */
  override final def getOutput(): DNode = {
    RepeatNode(constraint, this.output)
  }
  
}