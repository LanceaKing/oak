package edu.cmu.cs.oak.env

import scala.collection.immutable.Stack

import edu.cmu.cs.oak.nodes.DNode
import edu.cmu.cs.oak.nodes.RepeatNode

/**
 * Separate environment used to keep track of repeatable output 
 * generated by loops. In order to cope nested loops we therefore 
 * use nested (loop) environments.
 * 
 * @author Stefan Muehlbauer <s.muehlbauer@andrew.cmu.edu>
 * 
 */
class LoopEnv(parent: EnvListener, calls: Stack[String], constraint: String) extends Environment(parent: EnvListener, calls: Stack[String], constraint: String) { 

  /*
   * Get the output sequence from the environment.
   * @return output as sequence of values
   */
  override final def getOutput(): DNode = {
    RepeatNode(this.output)
  }
  
  def getDelta() = {
    new Delta(this.getOutput(), this.variables, this.heap.varval, Set(), Set())
  }
}