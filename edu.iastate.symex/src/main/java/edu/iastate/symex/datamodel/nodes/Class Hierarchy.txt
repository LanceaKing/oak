DataNode
	ArrayNode		
	ConcatNode
	LiteralNode
	ObjectNode		
	RepeatNode		
	SelectNode	
	SpecialNode
	SymbolicNode
DataNodeFactory





Code that can be reused to handle LiteralNodes:

	
		
//	
//	public static LiteralNode createLiteralNode(SymbolicNode symbolicNode) {
//		SinglePositionRange positionRange;
//		String type;
//		String stringValue;
//		String unescapedStringValue;
//
//		positionRange = null; // FIXME UndefinedPositionRange.inst;
//		type = LiteralNode.LITERAL_UNDEFINED;
//		stringValue = symbolicNode.getSymbolicValue();
//		unescapedStringValue = stringValue;
//
//		return new LiteralNode(positionRange, type, stringValue, unescapedStringValue);
//	}
//
//	public static LiteralNode createLiteralNode(SelectNode selectionNode) {
//		SinglePositionRange positionRange;
//		String type;
//		String stringValue;
//		String unescapedStringValue;
//
//		positionRange = null; // FIXME = UndefinedLocation.inst;
//		type = LiteralNode.LITERAL_UNDEFINED;
//		stringValue = selectionNode.getSymbolicValue();
//		unescapedStringValue = stringValue;
//
//		return new LiteralNode(positionRange, type, stringValue, unescapedStringValue);
//	}
//
//	public static LiteralNode createLiteralNode(SwitchCase switchCase) {
//		LiteralNode lit = createLiteralNode((ASTNode) switchCase);
//		lit.stringValue = "case "
//				+ (switchCase.getParent().getParent() instanceof SwitchStatement ? TraceTable
//						.getSourceCodeOfPhpASTNode(((SwitchStatement) switchCase
//								.getParent().getParent()).getExpression())
//						: "?")
//				+ " == "
//				+ (switchCase.getValue() != null ? TraceTable
//						.getSourceCodeOfPhpASTNode(switchCase.getValue())
//						: TraceTable.getSourceCodeOfPhpASTNode(switchCase));
//		lit.unescapedStringValue = lit.stringValue;
//		return lit;
//	}
//
//	public static LiteralNode createLiteralNode(String stringValue, SinglePositionRange positionRange) {
//		String type;
//		String unescapedStringValue;
//
//		// The value is dynamically generated from an AST
//		// node (e.g. function invocation)
//		type = LiteralNode.LITERAL_UNDEFINED;
//		unescapedStringValue = stringValue;
//
//		return new LiteralNode(positionRange, type, stringValue, unescapedStringValue);
//	}
//
//	/*
//	 * Escape/unescape string values
//	 */
//
//	public static String getUnescapedStringValue(String stringValue,
//			String stringType) {
//		//stringValue = stringValue.replace(" ", "c"); // Fix the copyright
//														// character (can't be
//														// printed in XML
//														// format)
//		if (stringType.equals(LiteralNode.LITERAL_QUOTES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('t', "\t");
//			mapTable.put('r', "\r");
//			mapTable.put('n', "\n");
//			mapTable.put('\\', "\\");
//			mapTable.put('"', "\"");
//			mapTable.put('\'', "\\\'"); // Keep \' as \' in quotes
//			// mapTable.put('u', "\\u"); // Fix a bug with the escape character
//			// \\u
//			return StringUtils.unescape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_APOSTROPHES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('t', "\t");
//			mapTable.put('r', "\r");
//			mapTable.put('n', "\n");
//			mapTable.put('\\', "\\");
//			mapTable.put('\'', "\'");
//			mapTable.put('\"', "\\\""); // Keep \" as \" in apostrophes
//			return StringUtils.unescape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_CONSTANT)) {
//			// Do nothing for CONSTANT
//			return stringValue;
//		} else if (stringType.equals(LiteralNode.LITERAL_INLINE)) {
//			// Do nothing for INLINE
//			return stringValue;
//		} else {
//			// Don't know how to handle UNDEFINED
//			MyLogger.log(
//					MyLevel.TODO,
//					"In LiteralNode.getUnescapedStringValue: Don't know how to handle UNDEFINED string type of LiteralNode: "
//							+ stringValue);
//			return stringValue;
//		}
//	}
//
//	public static String getUnescapedStringValuePreservingLength(
//			String stringValue, String stringType) {
//		//stringValue = stringValue.replace(" ", "c"); // Fix the copyright
//														// character (can't be
//														// printed in XML
//														// format)
//		if (stringType.equals(LiteralNode.LITERAL_QUOTES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('t', " \t");
//			mapTable.put('r', " \r");
//			mapTable.put('n', "\n "); // Put the space after so that \r\n ->
//										// _[\r][\n]_
//			mapTable.put('\\', " \\");
//			mapTable.put('"', "\" "); // Put the space after so that \\\" ->
//										// _\"_
//			mapTable.put('\'', "\\\'"); // Keep \' as \' in quotes
//			// mapTable.put('u', "\\u"); // Fix a bug with the escape character
//			// \\u
//			return StringUtils.unescape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_APOSTROPHES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('t', " \t");
//			mapTable.put('r', " \r");
//			mapTable.put('n', "\n "); // Put the space after so that \r\n ->
//										// _[\r][\n]_
//			mapTable.put('\\', " \\");
//			mapTable.put('\'', "\' "); // Put the space after so that \\\' ->
//										// _\'_
//			mapTable.put('\"', "\\\""); // Keep \" as \" in apostrophes
//			return StringUtils.unescape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_CONSTANT)) {
//			// Do nothing for CONSTANT
//			return stringValue;
//		} else if (stringType.equals(LiteralNode.LITERAL_INLINE)) {
//			// Do nothing for INLINE
//			return stringValue;
//		} else {
//			// Don't know how to handle UNDEFINED
//			MyLogger.log(
//					MyLevel.TODO,
//					"In LiteralNode.getUnescapedStringValuePreservingLength: Don't know how to handle UNDEFINED string type of LiteralNode: "
//							+ stringValue);
//			return stringValue;
//		}
//	}
//
//	public static String getEscapedStringValue(String stringValue,
//			String stringType) {
//		if (stringType.equals(LiteralNode.LITERAL_QUOTES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('\\', "\\\\");
//			mapTable.put('"', "\\\"");
//			return StringUtils.escape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_APOSTROPHES)) {
//			HashMap<Character, String> mapTable = new HashMap<Character, String>();
//			mapTable.put('\\', "\\\\");
//			mapTable.put('\'', "\\\'");
//			return StringUtils.escape(stringValue, mapTable);
//		} else if (stringType.equals(LiteralNode.LITERAL_CONSTANT)) {
//			// CONSTANT needs a special treatment. For example, if we are to
//			// replace a numeric value 10 with string a"bc, then 10 => "a\"bc"
//			if (StringUtils.isNumeric(stringValue))
//				return stringValue;
//			else
//				return "\""
//						+ getEscapedStringValue(stringValue,
//								LiteralNode.LITERAL_QUOTES) + "\"";
//		} else if (stringType.equals(LiteralNode.LITERAL_INLINE)) {
//			// Do nothing for INLINE
//			return stringValue;
//		} else {
//			// Don't know how to handle UNDEFINED
//			return stringValue;
//		}
//	}
